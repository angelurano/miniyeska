In the context of your MINISHELL project, "execution" refers to the phase after parsing, where the shell takes the Abstract Syntax Tree (AST) or command list and actually runs the commands, handling piping, redirections, and process control.

Below is a technical breakdown of the core parts of execution, their purpose, implementation, and the system functions required.

---

## 1. **Command Expansion and Preparation**
**Purpose:**  
Prepare the command for execution by:
- Expanding arguments (variables, wildcards)
- Preparing argv arrays
- Resolving executable paths

**Implementation:**  
- Traverse AST `AST_CMD` nodes or your `t_exec` structures.
- Expand arguments using functions like `get_env`, string manipulation, etc.
- Use `access()` to check if a command exists and is executable.
- Use `getenv("PATH")` and `execve()` to launch commands.

**Key System Functions:**  
- `getenv`, `access`, `execve`, string functions (from libft)

---

## 2. **Redirection Handling**
**Purpose:**  
Set up input/output file descriptors as specified by `<`, `>`, `>>`, `<<` (heredoc).

**Implementation:**  
- Before running a command, traverse redirection lists.
- Use `open()` to open files as needed.
- Use `dup2()` to duplicate file descriptors to `STDIN_FILENO` or `STDOUT_FILENO`.
- For heredoc, use `pipe()` to create a temp fd for input.

**Key System Functions:**  
- `open`, `close`, `dup2`, `pipe`, `unlink`, `access`

---

## 3. **Process Creation and Control**
**Purpose:**  
Run commands in child processes, set up pipelines, and handle process exit statuses.

**Implementation:**  
- Use `fork()` to create new child processes.
- In the child:
    - Set up redirections and pipes.
    - Use `execve()` to execute external commands.
    - Use `_exit()` or `exit()` to terminate.
- In the parent:
    - Use `wait()`, `waitpid()` to wait for child completion.
    - Collect exit status.

**Key System Functions:**  
- `fork`, `execve`, `exit`, `wait`, `waitpid`, `WIFEXITED`, `WEXITSTATUS`

---

## 4. **Pipeline Handling**
**Purpose:**  
Connect the output of one command to the input of another (`cmd1 | cmd2`).

**Implementation:**  
- Use `pipe()` to create two file descriptors.
- `fork()` both child processes.
- In the left child: 
    - `dup2()` the write end of the pipe to `STDOUT_FILENO`.
    - Close unused fds.
    - Run the command.
- In the right child: 
    - `dup2()` the read end of the pipe to `STDIN_FILENO`.
    - Close unused fds.
    - Run the command.
- Parent closes both ends and waits.

**Key System Functions:**  
- `pipe`, `dup2`, `close`, `fork`, `execve`, `waitpid`

---

## 5. **Built-in Command Handling**
**Purpose:**  
Detect and execute shell built-ins (e.g., `cd`, `export`, `exit`) without forking unless necessary.

**Implementation:**  
- Before `fork()`, check if the command is a built-in.
- If so, execute the function directly in the shell process.
- Some built-ins (like `exit`) affect the parent shell, so they must not be run in a child.

**Key System Functions:**  
- None required for built-ins (just function calls and environment manipulation)

---

## 6. **Subshells and Conditional Execution (`&&`, `||`)**
**Purpose:**  
Handle subshells (commands within parentheses) and logical operators.

**Implementation:**  
- For subshells: fork a new process, recursively execute the inner AST.
- For `&&`/`||`: execute left child, check status, then execute right child if logic matches.

**Key System Functions:**  
- `fork`, `waitpid`, recursive execution functions

---

## 7. **Signal Handling**
**Purpose:**  
Handle interrupts (Ctrl+C, Ctrl+\) and propagate them correctly between parent and child.

**Implementation:**  
- Use `signal()` or `sigaction()` to set handlers.
- Reset to default in children before `execve()`.

**Key System Functions:**  
- `signal`, `sigaction`, `kill`

---

## 8. **Cleanup**
**Purpose:**  
Free memory, close fds, and remove temporary files (heredoc).

**Implementation:**  
- Free all dynamically-allocated structures.
- Close any non-standard file descriptors.
- Use `unlink()` for temp files.

**Key System Functions:**  
- `free`, `close`, `unlink`

---

### Summary Table

| Part                      | Purpose                                         | Key Syscalls/Functions          |
|---------------------------|-------------------------------------------------|---------------------------------|
| Command Expansion         | Prepare argv, resolve exec path                  | getenv, access, execve          |
| Redirections              | Set up input/output/append/heredoc               | open, close, dup2, pipe, unlink |
| Process Control           | Fork, exec, wait for children                    | fork, execve, exit, waitpid     |
| Pipelines                 | Connect multiple processes                       | pipe, dup2, fork, close         |
| Built-ins                 | Run shell internal commands                      | (none/syscalls)                 |
| Subshells/Conditionals    | Parentheses and &&, ||                           | fork, waitpid                   |
| Signals                   | Handle and propagate terminal signals            | signal, sigaction, kill         |
| Cleanup                   | Free resources                                   | free, close, unlink             |
---

